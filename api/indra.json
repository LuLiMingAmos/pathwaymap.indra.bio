{
 "paths": {
  "/preassembly/filter_grounded_only": {
   "post": {
    "parameters": [
     {
      "in": "body",
      "name": "statementsObj",
      "schema": {
       "$ref": "#/definitions/statementsObj"
      },
      "description": "Statements to be used in preassembly."
     }
    ],
    "tags": [
     "preassembly"
    ],
    "produces": [
     "application/json"
    ],
    "operationId": "filterGroundedOnly",
    "consumes": [
     "application/json"
    ],
    "responses": {
     "200": {
      "schema": {
       "$ref": "#/definitions/statementsObj"
      },
      "description": "Statements filtered to grounded statements."
     }
    },
    "summary": "Filter to grounded Statements only.",
    "description": "Takes in a list of INDRA statements and returns a list of only those that are grounded."
   }
  },
  "/preassembly/map_sequence": {
   "post": {
    "parameters": [
     {
      "in": "body",
      "name": "statementsObj",
      "schema": {
       "$ref": "#/definitions/statementsObj"
      },
      "description": "Statements to be mapped."
     }
    ],
    "tags": [
     "preassembly"
    ],
    "produces": [
     "application/json"
    ],
    "operationId": "mapSequence",
    "consumes": [
     "application/json"
    ],
    "responses": {
     "200": {
      "schema": {
       "$ref": "#/definitions/statementsObj"
      },
      "description": "Sequence mapped."
     }
    },
    "summary": "Map sequence on a list of INDRA Statements.",
    "description": "Takes in a list of INDRA statements and map sequence on the list."
   }
  },
  "/preassembly/filter_by_type": {
   "post": {
    "parameters": [
     {
      "in": "body",
      "name": "statementsObjFilterType",
      "schema": {
       "$ref": "#/definitions/statementsObjFilterType"
      },
      "description": "Statements to be used in preassembly."
     }
    ],
    "tags": [
     "preassembly"
    ],
    "produces": [
     "application/json"
    ],
    "operationId": "filterByType",
    "consumes": [
     "application/json"
    ],
    "responses": {
     "200": {
      "schema": {
       "$ref": "#/definitions/statementsObj"
      },
      "description": "Statements filtered."
     }
    },
    "summary": "Filter to a given INDRA Statement type.",
    "description": "Takes in a list of INDRA statements and returns a list of statements filtered to the specified type."
   }
  },
  "/bel/process_pybel_neighborhood": {
   "post": {
    "parameters": [
     {
      "in": "body",
      "name": "genesObj",
      "schema": {
       "$ref": "#/definitions/genesObj"
      },
      "description": "Genes to extract information about from BEL."
     }
    ],
    "tags": [
     "BEL"
    ],
    "produces": [
     "application/json"
    ],
    "operationId": "pybelNeighborhood",
    "consumes": [
     "application/json"
    ],
    "responses": {
     "200": {
      "schema": {
       "$ref": "#/definitions/statementsObj"
      },
      "description": "BEL neighborhood extracted from Large Corpus via PyBEL."
     }
    },
    "summary": "Process BEL Large Corpus neighborhood and return INDRA Statements.",
    "description": "Takes in a list of genes and returns INDRA statements."
   }
  },
  "/trips/process_text": {
   "post": {
    "parameters": [
     {
      "in": "body",
      "name": "textObj",
      "schema": {
       "$ref": "#/definitions/textObj"
      },
      "description": "Text to be processed by TRIPS."
     }
    ],
    "tags": [
     "TRIPS"
    ],
    "produces": [
     "application/json"
    ],
    "operationId": "readTRIPS",
    "consumes": [
     "application/json"
    ],
    "responses": {
     "200": {
      "schema": {
       "$ref": "#/definitions/statementsObj"
      },
      "description": "text processed. JSON INDRA statements returned."
     }
    },
    "summary": "Read text using TRIPS and get statements back.",
    "description": "Read text using TRIPS and get statements back."
   }
  },
  "/preassembly/run_preassembly": {
   "post": {
    "parameters": [
     {
      "in": "body",
      "name": "statementsObj",
      "schema": {
       "$ref": "#/definitions/statementsObj"
      },
      "description": "Statements to be used in preassembly."
     }
    ],
    "tags": [
     "preassembly"
    ],
    "produces": [
     "application/json"
    ],
    "operationId": "runPreassembly",
    "consumes": [
     "application/json"
    ],
    "responses": {
     "200": {
      "schema": {
       "$ref": "#/definitions/statementsObj"
      },
      "description": "Preassembly complete."
     }
    },
    "summary": "Run preassembly on a list of INDRA Statements.",
    "description": "Takes in a list of INDRA statements and runs preassembly."
   }
  },
  "/preassembly/map_grounding": {
   "post": {
    "parameters": [
     {
      "in": "body",
      "name": "statementsObj",
      "schema": {
       "$ref": "#/definitions/statementsObj"
      },
      "description": "Statements to be grounded."
     }
    ],
    "tags": [
     "preassembly"
    ],
    "produces": [
     "application/json"
    ],
    "operationId": "groundStatments",
    "consumes": [
     "application/json"
    ],
    "responses": {
     "200": {
      "schema": {
       "$ref": "#/definitions/statementsObj"
      },
      "description": "statments grounded."
     }
    },
    "summary": "Ground INDRA statments.",
    "description": "Takes in a list of INDRA statements and returns the list of grounded statements."
   }
  },
  "/reach/process_text": {
   "post": {
    "parameters": [
     {
      "in": "body",
      "name": "textObj",
      "schema": {
       "$ref": "#/definitions/textObj"
      },
      "description": "Text to be processed by REACH."
     }
    ],
    "tags": [
     "REACH"
    ],
    "produces": [
     "application/json"
    ],
    "operationId": "readREACH",
    "consumes": [
     "application/json"
    ],
    "responses": {
     "200": {
      "schema": {
       "$ref": "#/definitions/statementsObj"
      },
      "description": "text processed. JSON INDRA statements returned."
     }
    },
    "summary": "Read text using REACH and get statements back.",
    "description": "Read text using REACH and get statements back."
   }
  },
  "/reach/process_pmc": {
   "post": {
    "parameters": [
     {
      "in": "body",
      "name": "pmcid",
      "schema": {
       "$ref": "#/definitions/pmcID"
      },
      "description": "The PMCID of the publication to be processed by REACH."
     }
    ],
    "tags": [
     "REACH"
    ],
    "produces": [
     "application/json"
    ],
    "operationId": "processPMC",
    "consumes": [
     "application/json"
    ],
    "responses": {
     "200": {
      "schema": {
       "$ref": "#/definitions/statementsObj"
      },
      "description": "PMCID processed. JSON INDRA statements returned."
     }
    },
    "summary": "Read text using REACH and get statements back. May timeout in SwaggerUI.",
    "description": "Read text using REACH and get statements back."
   }
  }
 },
 "tags": [
  {
   "name": "developers",
   "description": "Operations available to regular developers"
  }
 ],
 "info": {
  "version": "1.0.0",
  "contact": {
   "email": "petar_todorov@hms.harvard.edu"
  },
  "license": {
   "name": "Simplified BSD License",
   "url": "https://github.com/sorgerlab/indra/blob/master/LICENSE"
  },
  "description": "REST API for INDRA webservice",
  "title": "INDRA REST-API"
 },
 "definitions": {
  "textObj": {
   "properties": {
    "text": {
     "example": "Ras phosphorylates Raf.",
     "type": "string"
    }
   },
   "required": [
    "text"
   ],
   "type": "object"
  },
  "pmcID": {
   "properties": {
    "pmcid": {
     "example": "5148607",
     "type": "string"
    }
   },
   "required": [
    "pmcid"
   ],
   "type": "object"
  },
  "statements": {
   "items": {
    "type": "object"
   },
   "type": "array"
  },
  "statementsObjFilterType": {
   "properties": {
    "statements": {
     "$ref": "#/definitions/statements"
    },
    "type": {
     "example": "Phosphorylation",
     "type": "string"
    }
   },
   "required": [
    "statements",
    "type"
   ],
   "type": "object"
  },
  "genesObj": {
   "properties": {
    "genes": {
     "example": [
      "HMOX1",
      "PMAIP1"
     ],
     "type": "array"
    }
   },
   "required": [
    "genes"
   ],
   "type": "object"
  },
  "statementsObj": {
   "properties": {
    "statements": {
     "$ref": "#/definitions/statements"
    }
   },
   "required": [
    "statements"
   ],
   "type": "object"
  }
 },
 "swagger": "2.0",
 "host": "api.indra.bio:8000",
 "schemes": [
  "http"
 ]
}
